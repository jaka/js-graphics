<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Cube rotation</title>
  <style>
  #canvas {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    height: 100%;
    display: block;
  }
  canvas {
    image-rendering: optimizeSpeed;
    image-rendering: -moz-crisp-edges;
    image-rendering: -webkit-optimize-contrast;
    image-rendering: -o-crisp-edges;
    image-rendering: crisp-edges;
    -ms-interpolation-mode: nearest-neighbor;
  }
  </style>
</head>
<body>

<canvas id="canvas"></canvas>

<script>
window.requestAnimFrame = (function(callback) {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {window.setTimeout(callback, 1000 / 60);};
})();
</script>

  <script>

  var q = window.innerHeight / window.innerWidth;

  var w = 320, h = Math.floor(q * w), d = 200;

  var canvas = document.getElementById("canvas");
  canvas.height = h;
  canvas.width = w;

  var ctx = canvas.getContext("2d");

  var Vertex = function()
  {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.px = 0;
    this.py = 0;
    this.a = 0;
  };

  var cx = w / 2, cy = h / 2;
  var vertices = new Array(8);

  function createVertex(i)
  {
    vertices[i].x = i & 1 ? -50 : 50;
    vertices[i].y = i & 2 ? -50 : 50;
    vertices[i].z = i & 4 ? -50 : 50;
  }

  function drawStar(x, y, color)
  {
    ctx.fillStyle = color;
    ctx.fillRect(x, y, 1, 1);
  }

  function drawLine(x1, y1, x2, y2, a1, a2)
  {
    var dx, dy, xsign, ysign;

    if (y2 > y1)
    {
      dy = y2 - y1; ysign = 1;
    }
    else
    {
      dy = y1 - y2; ysign = -1;
    }

    if (x2 > x1)
    {
      dx = x2 - x1; xsign = 1;
    }
    else
    {
      dx = x1 - x2; xsign = -1;
    }

    var step = 0;
    var x = Math.round(x1);
    var y = Math.round(y1);

    if (dx > dy)
    {
      for (i = 0; i < dx; i++)
      {
        x += xsign;
        step += dy;
        if (step >= dx)
        {
          y += ysign;
          step -= dx;
        }
        var k = i / dx;
        var a = k * a2 + (1 - k) * a1;
        var color = 'rgb(' + 128 * a + ',0,0)'; 
        drawStar(x, y, color);
      }
    }
    else
    {
      for (i = 0; i < dy; i++)
      {
        y += ysign;
        step += dx;
        if (step >= dy)
        {
          x += xsign;
          step -= dy;
        }
        var k = i / dy;
        var a = k * a2 + (1 - k) * a1;
        var color = 'rgb(' + 128 * a + ',0,0)';
        drawStar(x, y, color);
      }
    }
  }

  function drawCircle(xC, yC, R, color)
  {
    var x = 0, y = R;
    var d = 5 - 4 * R;
    var dA = 12, dB = 20 - 8 * R;
    while (x <= y)
    {
      drawStar(xC + x, xC + y, color);
      drawStar(xC + y, xC + x, color);

      drawStar(xC + x, xC - y, color);
      drawStar(xC + y, xC - x, color);

      drawStar(xC - x, xC + y, color);
      drawStar(xC - y, xC + x, color);

      drawStar(xC - x, xC - y, color);
      drawStar(xC - y, xC - x, color);
      if (d < 0)
      {
        d += dA;
        dB += 8;
      }
      else
      {
        y--;
        d += dB;
        dB += 16;
      }
      x++;
      dA += 8;
    }
  }

  function clearScreen()
  {
    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, w, h);
  }

  var kotx = 0;
  var koty = 0;
  var kotz = 0;

  function moveCube()
  {
    clearScreen();
    for (var i = 0; i < vertices.length; i++)
    {
      var vertex = vertices[i];

      /* Rotation */
      var x2 = Math.cos(koty) * vertex.x - Math.sin(koty) * vertex.z;
      var y2 = Math.cos(kotz) * vertex.y - Math.sin(kotz) * x2;
      var z2 = Math.cos(koty) * vertex.z + Math.sin(koty) * vertex.x;
      var x1 = Math.cos(kotz) * x2 + Math.sin(kotz) * vertex.y;
      var y1 = Math.cos(kotx) * y2 + Math.sin(kotx) * z2;
      var z1 = Math.cos(kotx) * z2 - Math.sin(kotx) * y2;
 
      vertex.a = Math.atan(-10 * z1 / d) / Math.PI + 1;

      var k = d / (z1 + 1 * d);
      vertex.px = Math.round(k * x1 + cx);
      vertex.py = Math.round(k * y1 + cy);
      if (0 <= vertex.px && vertex.px <= w && 0 <= vertex.py && vertex.py <= h)
      {
        var color = 'rgb(' + 128 * vertex.a + ',0,0)'; 
        drawStar(vertex.px, vertex.py, color);
      }
    }
    /* Edges */
    for (var i = 0; i < vertices.length; i++)
    {
      for (j = 1; j < vertices.length; j = 2 * j)
      {
        var k = i ^ j;
        if (i >= k)
        {
          continue;
        }
        drawLine(vertices[i].px, vertices[i].py, vertices[k].px, vertices[k].py, vertices[i].a, vertices[k].a)
      }
    }
  }

  function startVertexRotation()
  {
    kotx += 0.01;
    koty += 0.01;
    kotz += 0.002;
    moveCube();
    //drawCircle(110,110,20, "yellow");
    requestAnimFrame(startVertexRotation);
  }

  function vertexRotation()
  {
    clearScreen();
    for (var i = 0; i < 8; i++)
    {
      vertices[i] = new Vertex();
      createVertex(i);
    }
    startVertexRotation();
  }

  window.addEventListener("load", vertexRotation); 

  </script>

</body>
</html>
